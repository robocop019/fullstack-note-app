{"version":3,"sources":["services/notes.js","components/Note.js","components/Notification.js","App.js","index.js"],"names":["request","axios","get","nonExisting","id","content","date","important","then","response","data","concat","newObject","post","put","Note","note","toggleImportance","label","className","onClick","Notification","message","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","Footer","style","color","fontStyle","fontSize","map","key","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","onChange","target","value","type","ReactDOM","render","document","getElementById"],"mappings":"0PAyBe,EArBA,WACd,IAAMA,EAAUC,IAAMC,IAHP,cAITC,EAAc,CACnBC,GAAI,IACJC,QAAS,mCACTC,KAAM,2BACNC,WAAW,GAEZ,OAAOP,EAAQQ,MAAK,SAACC,GAAD,OAAcA,EAASC,KAAKC,OAAOR,OAazC,EAVA,SAACS,GAEf,OADgBX,IAAMY,KAdP,aAcqBD,GACrBJ,MAAK,SAACC,GAAD,OAAcA,EAASC,SAQ7B,EALA,SAACN,EAAIQ,GAEnB,OADgBX,IAAMa,IAAN,UAnBD,aAmBC,YAAwBV,GAAMQ,GAC/BJ,MAAK,SAACC,GAAD,OAAcA,EAASC,SCV7BK,EAVF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACfC,EAAQF,EAAKT,UAAY,qBAAuB,iBACtD,OACC,wBAAIY,UAAU,QACZH,EAAKX,QACN,4BAAQe,QAASH,GAAjB,IAAqCC,EAArC,OCOYG,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACvB,OAAgB,OAAZA,EACI,KAIP,yBAAKH,UAAU,SACbG,ICqGWC,EAzGH,WAAO,IAAD,EACSC,mBAAS,IADlB,mBACVC,EADU,KACHC,EADG,OAEaF,mBAAS,eAFtB,mBAEVG,EAFU,KAEDC,EAFC,OAGaJ,oBAAS,GAHtB,mBAGVK,EAHU,KAGDC,EAHC,OAIsBN,mBAAS,MAJ/B,mBAIXO,EAJW,KAIGC,EAJH,KAMjBC,qBAAU,WACTC,IAEE1B,MAAK,SAAA2B,GACLT,EAASS,QAET,IAGH,IAAMC,EAAcP,EAAUJ,EAAQA,EAAMY,QAAO,SAACrB,GAAD,OAAUA,EAAKT,aA2C5D+B,EAAS,WAOd,OACE,yBAAKC,MAPa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAKX,6BACA,uGAKF,OACC,6BACC,qCAEA,kBAAC,EAAD,CAAcpB,QAASS,IAEvB,6BACC,4BAAQX,QA/DgB,WAC1BU,GAAYD,KA8DV,QACOA,EAAU,YAAc,QAIhC,4BACEO,EAAYO,KAAI,SAAC3B,GAAD,OAChB,kBAAC,EAAD,CACC4B,IAAK5B,EAAKZ,GACVY,KAAMA,EACNC,iBAAkB,kBAjEI,SAACb,GAC3B,IAAMY,EAAOS,EAAMoB,MAAK,SAAAC,GAAC,OAAIA,EAAE1C,KAAOA,KAChC2C,EAAW,2BAAQ/B,GAAR,IAAcT,WAAYS,EAAKT,YAEhD2B,EACS9B,EAAI2C,GACXvC,MAAK,SAAAwC,GACLtB,EAASD,EAAMkB,KAAI,SAAC3B,GAAD,OAAUA,EAAKZ,KAAOA,EAAKY,EAAOgC,SAErDC,OAAM,SAAAC,GACNlB,EAAgB,SAAD,OAAUhB,EAAKX,QAAf,sCACf8C,YAAW,WACXnB,EAAgB,QACb,QAoDuBoB,CAAmBpC,EAAKZ,WAKnD,0BAAMiD,SArDQ,SAACC,GAChBA,EAAMC,iBACN,IAAMC,EAAa,CAClBnD,QAASsB,EACTrB,MAAM,IAAImD,MAAOC,cACjBnD,UAAWoD,KAAKC,SAAW,IAG5B1B,EACSsB,GACPhD,MAAK,SAAAwC,GACLtB,EAASD,EAAMd,OAAOqC,IACtBpB,EAAW,SA0CX,2BAAOiC,SA3Ee,SAACP,GACzB1B,EAAW0B,EAAMQ,OAAOC,QA0EaA,MAAOpC,IAC1C,4BAAQqC,KAAK,UAAb,SAGD,kBAAC1B,EAAD,Q,MCpGH2B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.16a78d88.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n\tconst request = axios.get(baseUrl)\n\tconst nonExisting = {\n\t\tid: 10000,\n\t\tcontent: 'This note is not saved to server',\n\t\tdate: '2019-05-30T17:30:31.098Z',\n\t\timportant: true,\n\t}\n\treturn request.then((response) => response.data.concat(nonExisting))\n}\n\nconst create = (newObject) => {\n\tconst request = axios.post(baseUrl, newObject)\n\treturn request.then((response) => response.data)\n}\n\nconst update = (id, newObject) => {\n\tconst request = axios.put(`${baseUrl}/${id}`, newObject)\n\treturn request.then((response) => response.data)\n}\n\nexport default { getAll, create, update }\n","import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n\tconst label = note.important ? 'Make not important' : 'Make important'\n\treturn (\n\t\t<li className='note'>\n\t\t\t{note.content}\n\t\t\t<button onClick={toggleImportance}> {label} </button>\n\t\t</li>\n\t)\n}\n\nexport default Note","import React from 'react'\n\nconst Notification = ({ message }) => {\n\tif (message === null) {\n\t\treturn null\n\t}\n\n\treturn (\n\t\t<div className='error'>\n\t\t\t{message}\n\t\t</div>\n\t)\n}\n\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport noteService from './services/notes'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\n\nconst App = () => {\n\tconst [notes, setNotes] = useState([])\n\tconst [newNote, setNewNote] = useState('new note...')\n\tconst [showAll, setShowAll] = useState(true)\n\tconst[errorMessage, setErrorMessage] = useState(null)\n\n\tuseEffect(() => {\n\t\tnoteService\n\t\t\t.getAll()\n\t\t\t.then(initialNotes => {\n\t\t\t\tsetNotes(initialNotes)\n\t\t\t})\n\t}, [])\n\n\n\tconst notesToShow = showAll ? notes : notes.filter((note) => note.important)\n\n\tconst showImportantNotes = () => {\n\t\tsetShowAll(!showAll)\n\t}\n\n\tconst handleNoteChange = (event) => {\n\t\tsetNewNote(event.target.value)\n\t}\n\n\tconst toggleImportanceOf = (id) => {\n\t\tconst note = notes.find(n => n.id === id)\n\t\tconst changedNote = { ...note, important: !note.important }\n\t\t\n\t\tnoteService\n\t\t\t.update(id, changedNote)\n\t\t\t.then(returnedNote => {\n\t\t\t\tsetNotes(notes.map((note) => note.id !== id ? note : returnedNote))\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsetErrorMessage(`Note '${note.content}' was already removed from server`)\n\t\t\t\tsetTimeout(() => {\n\t\t\t\tsetErrorMessage(null)\n\t\t\t\t}, 5000)\n\t\t\t})\n\t}\n\n\tconst addNote = (event) => {\n\t\tevent.preventDefault()\n\t\tconst noteObject = {\n\t\t\tcontent: newNote,\n\t\t\tdate: new Date().toISOString(),\n\t\t\timportant: Math.random() < 0.5\n\t\t}\n\n\t\tnoteService\n\t\t\t.create(noteObject)\n\t\t\t.then(returnedNote => {\n\t\t\t\tsetNotes(notes.concat(returnedNote))\n\t\t\t\tsetNewNote('')\n\t\t\t})\n\t}\n\n\tconst Footer = () => {\n\t\tconst footerStyle = {\n\t\t  color: 'green',\n\t\t  fontStyle: 'italic',\n\t\t  fontSize: 16\n\t\t}\n\t  \n\t\treturn (\n\t\t  <div style={footerStyle}>\n\t\t\t<br />\n\t\t\t<em>Note app, Department of Computer Science, University of Helsinki 2020</em>\n\t\t  </div> \n\t\t)\n\t  }\n\n\treturn (\n\t\t<div>\n\t\t\t<h1>Notes</h1>\n\n\t\t\t<Notification message={errorMessage} />\n\n\t\t\t<div>\n\t\t\t\t<button onClick={showImportantNotes}>\n\t\t\t\t\tShow {showAll ? 'Important' : 'All'}\n\t\t\t\t</button>\n\t\t\t</div>\n\n\t\t\t<ul>\n\t\t\t\t{notesToShow.map((note) => (\n\t\t\t\t\t<Note\n\t\t\t\t\t\tkey={note.id}\n\t\t\t\t\t\tnote={note}\n\t\t\t\t\t\ttoggleImportance={() => toggleImportanceOf(note.id)}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</ul>\n\n\t\t\t<form onSubmit={addNote}>\n\t\t\t\t<input onChange={handleNoteChange} value={newNote} />\n\t\t\t\t<button type=\"submit\">Save</button>\n\t\t\t</form>\n\n\t\t\t<Footer />\n\t\t</div>\n\t)\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport  './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}